from telegram.ext import Updater, CommandHandler
from telegram.ext import Filters
from telegram.ext import MessageHandler
from kiwi_controller import *
from model.questions import *
import logging
from threading import Thread

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

single_question = ""
user_search = ""


def get_a_single_question():
    """ return single question in  generator type """
    yield from questions


def init():
    """declare generator variable"""
    single_question_generator = get_a_single_question()
    return single_question_generator


def reset_questions_and_remove_search_handler():
    """reset single question when StopIteration exception appear"""
    global single_question
    single_question = init()
    updater.dispatcher.remove_handler(handler)


def search(bot, update, chat_data):
    global handler

    try:
        next_question = next(single_question)

        chat_data[f'{next_question}'] = update.message.text
        print(chat_data)
        print(chat_data[f'{CITY_FROM}'])
        if next_question == '–ö—ñ–Ω–µ—Ü—å –ø–∏—Ç–∞–Ω—å':
            raise StopIteration

        bot.send_message(chat_id=update.message.chat_id,
                         text=next_question)
    except:
        bot.send_message(parse_mode='Markdown', chat_id=update.message.chat_id,
                         text=f'''–û–∫, –¥–∞–π—Ç–µ –º–µ–Ω—ñ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ üîé''')
        result_of_user_search = init_search_parameters(chat_data[f'{CITY_TO}'],
                                                       chat_data[f'{DATA_FROM}'],
                                                       # chat_data[f'{DATA_FROM}'],
                                                       # chat_data[f'{DATA_TO}']

                                                       )
        print(result_of_user_search)
        try:
            if result_of_user_search == None:
                bot.send_message(parse_mode='Markdown', chat_id=update.message.chat_id,
                                 text=f'''–ù–∞ –∂–∞–ª—å —Ç–∏ –≤–≤—ñ–≤ —Ö–∏–±–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –ø–µ—Ä–µ–≤—ñ—Ä —ó—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –ø–æ–∫–∏ —è –Ω–µ –ø—ñ—à–æ–≤ –¥—Ä—ñ–º–∞—Ç–∏ üôä ''')

                return
            if len(result_of_user_search) == 0:
                bot.send_message(parse_mode='Markdown', chat_id=update.message.chat_id,
                                 text=f'''–ü—Ä–æ–±–∞—á, –∞–ª–µ –∑–∞ —Ç–∞–∫–∏–º–∏ –ø–µ—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—å –Ω—ñ—á–æ–≥–æ –∑–Ω–∞–π—Ç–∏ :( –ó–∞–ø–∞–º—è—Ç–∞–π –≥–æ–ª–æ–≤–Ω–µ –Ω–µ –∫—É–¥–∏, –∞ –∑ –∫–∏–º! üòâ''')
                return
            send_updates_for_users(result_of_user_search, bot, update)
        except:
            print("BAD REQUEST")

        finally:
            reset_questions_and_remove_search_handler()
            reset()
            print(fly_from)
            chat_data.clear()


def handle_search(bot, update, chat_data):
    """Here we set handler to all text masseges and for invoke
    search command """
    global handler
    global single_question

    single_question = init()
    updater.dispatcher.add_handler(handler)
    search(bot, update, chat_data)


def check(bot, update):
    bot.send_message(parse_mode='Markdown', chat_id=update.message.chat_id,
                     text=f'''–ü—Ä–∏–≤—ñ—Ç *{update.message.chat.first_name}* –º–∞—é –¥–ª—è —Ç–µ–±–µ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µüî• –ó–∞ —Ö–≤–∏–ª—å–∫—É –≤–∏—à–ª—é —Ç–æ–±—ñ –∫—ñ–ª—å–∫–∞  *lowcost* –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –¥–ª—è *–≤–¥–∞–ª–∏—Ö* –ø–æ–¥–æ—Ä–æ–∂–µ–π üóΩ ''')
    print(update.message.chat.first_name)
    low_cost_result = get_data_by_default_parameters()
    send_updates_for_users(low_cost_result, bot, update)
    bot.send_message(chat_id=update.message.chat_id,
                     text=f'''–í —Ü—ñ–Ω—É –≤—Ö–æ–¥–∏—Ç—å –∫–≤–∏—Ç–æ–∫ —Ç—É–¥–∏ –π –Ω–∞–∑–∞–¥.–¶—ñ–Ω–∞ –≤–∫–∞–∑–∞–Ω–∞ –¥–ª—è 1 –æ—Å–æ–±–∏.–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≤–ø–æ–¥–æ–±–∞–π–∫—É —è–∫—â–æ —è —Ç–æ–±—ñ –≤–≥–æ–¥–∏–≤ ‚ô•''')


def send_updates_for_users(result_of_search, bot, update):
    couter = 25
    prev_counter = 0

    for it in range(0, int(len(result_of_search) / couter) + 1):
        if len(result_of_search) >= 25:
            bot.send_message(parse_mode='HTML', chat_id=update.message.chat_id,
                             text=f'''{''.join(result_of_search[prev_counter:couter])}''')
            prev_counter = couter
            couter *= 2
        else:
            bot.send_message(parse_mode='HTML', chat_id=update.message.chat_id,
                             text=f'''{''.join(result_of_search[1:10])}''')


def start(bot, update):
    bot.send_message(parse_mode='Markdown', chat_id=update.message.chat_id,
                     text=f'''–ü—Ä–∏–≤—ñ—Ç *{update.message.chat.first_name}* —è –±–æ—Ç,—â–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∑–∞–±—É—Ç–∏ –ø—Ä–æ –Ω—É–¥–Ω—É–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—å–æ—Ä—Ñ—ñ–Ω–≥ –≤ –ø–æ—à—É–∫—É  —Ü—ñ–∫–∞–≤–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π.–ù–∏–∂—á–µ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —è–∫—ñ —è –≤—ñ–¥–Ω—É–∫—É—é—Å—å
*/search* - –ø–æ—à—É–∫ –∞–≤—ñ–∞–±—ñ–ª–µ—Ç—ñ–≤ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —â–æ —Ç–∏ –ø–æ–¥–∞—Å–∏
*/check* - –ø–µ—Ä–µ–≤—ñ—Ä –Ω–∞–π–≥–∞—Ä—è—á—ñ—à—ñ —Ç–∞ –Ω–∞–π–¥–µ—à–µ–≤—à—ñ –∞–≤—ñ–±—ñ–∞–ª–µ—Ç–∏ –∑ –º—ñ—Å—Ç–∞ –ö—Ä–∞–∫—ñ–≤'''
                          )


#  define a handler for search commmand
handler = MessageHandler(Filters.text | Filters.command, search, pass_chat_data=True)

updater = Updater(TELEGRAM_TOKEN)

updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('search', handle_search, pass_chat_data=True))
updater.dispatcher.add_handler(CommandHandler('check', check, pass_chat_data=True))

updater.start_polling()
updater.idle()
